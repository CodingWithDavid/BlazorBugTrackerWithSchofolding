@page "/bugs/details"
@inject BlazorBugTrackerWithSchofolding.Data.BlazorBugTrackerWithSchofoldingContext DB
@using BlazorBugTrackerWithSchofolding.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Bug</h4>
    <hr />
    @if (bug is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@bug.Description</dd>
            <dt class="col-sm-2">StepsToReproduce</dt>
            <dd class="col-sm-10">@bug.StepsToReproduce</dd>
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@bug.Name</dd>
            <dt class="col-sm-2">CreateDate</dt>
            <dd class="col-sm-10">@bug.CreateDate</dd>
            <dt class="col-sm-2">ModifiedDate</dt>
            <dd class="col-sm-10">@bug.ModifiedDate</dd>
            <dt class="col-sm-2">Reporter</dt>
            <dd class="col-sm-10">@bug.Reporter</dd>
            <dt class="col-sm-2">AssignedTo</dt>
            <dd class="col-sm-10">@bug.AssignedTo</dd>
            <dt class="col-sm-2">Priority</dt>
            <dd class="col-sm-10">@bug.Priority</dd>
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@bug.Status</dd>
        </dl>
        <div>
            <a href="@($"/bugs/edit?id={bug.Id}")">Edit</a> |
            <a href="@($"/bugs")">Back to List</a>
        </div>
    }
</div>

@code {
    Bug? bug;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        bug = await DB.Bug.FirstOrDefaultAsync(m => m.Id == Id);

        if (bug is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
